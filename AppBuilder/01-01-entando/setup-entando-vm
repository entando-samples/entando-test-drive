#!/bin/bash
set -euxo pipefail

until [ -f /opt/instruqt/bootstrap/host-bootstrap-completed ]; do
    echo "Waiting for instruqt bootstrap to complete"
    sleep 1
done

cat <<EOF > server.csr.cnf
[req]
default_bits = 2048
prompt = no
default_md = sha256
distinguished_name = dn

[dn]
C=US
ST=MN
L=Eagan
O=Tech Forum
OU=Marketing
emailAddress=admin@techforum.com
CN = ${HOSTNAME}.${INSTRUQT_PARTICIPANT_ID}.instruqt.io
EOF
#chmod 777 server.csr.cnf

cat <<EOF > v3.ext
authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = ${HOSTNAME}.${INSTRUQT_PARTICIPANT_ID}.instruqt.io
DNS.2=sub.myexample.com
DNS.3=myexample1.com
DNS.4=localhost
EOF

#patch-cm.sh is used to patch the quickstart-eci ingress with /k8s/
cat <<EOF > patch-cm.sh
sudo kubectl -n entando get deployment quickstart-cm-deployment -o yaml > entandocm.yaml
sed -i 's/  replicas: 1/  replicas: 0/g' entandocm.yaml
sudo kubectl -n entando apply -f entandocm.yaml

sudo kubectl -n entando get deployment quickstart-cm-deployment -o yaml > entandocm.yaml
sed -i 's/\/k8s/\/k8s\//g' entandocm.yaml
sed -i 's/  replicas: 0/  replicas: 1/g' entandocm.yaml
sudo kubectl -n entando apply -f entandocm.yaml
#rm entandocm.yaml

EOF
chmod 777 patch-cm.sh

cat <<EOF > start.sh
openssl genrsa -des3 -out rootCA.key -passout pass:entando 2048
openssl req -x509 -new -nodes -key rootCA.key -passin pass:entando -sha256 -days 1460 -out rootCA.pem -subj "/C=US/ST=MN/L=Eagan/O=Tech Forum/OU=Marketing/CN=entando-vm.z4fbf9ehuit6.instruqt.io/emailAddress=admin@techforum.com/"
openssl req -new -sha256 -nodes -out server.csr -newkey rsa:2048 -keyout server.key -passin pass:entando -config server.csr.cnf#openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 500 -sha256 -extfile v3.ext
openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -passin pass:foobar -CAcreateserial -out server.crt -days 500 -sha256 -extfile v3.ext

var=$(echo $HOSTNAME.$INSTRUQT_PARTICIPANT_ID.instruqt.io)
sudo kubectl create namespace entando
sudo kubectl apply -n entando -f https://raw.githubusercontent.com/entando/entando-releases/v6.3.2/dist/ge-1-1-6/namespace-scoped-deployment/orig/namespace-resources.yaml
#curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.3.2.tar.gz | tar xvz
sudo kubectl apply -f https://raw.githubusercontent.com/entando/entando-releases/v6.3.2/dist/ge-1-1-6/namespace-scoped-deployment/cluster-resources.yaml   
curl -sfL https://github.com/entando-k8s/entando-helm-quickstart/archive/v6.3.2.tar.gz | tar xvz

chmod 777 -R entando-helm-quickstart-6.3.2
cd entando-helm-quickstart-6.3.2

#Updating entando-operator-config.yaml
sed -i 's/#  entando.tls.secret.name: sample-tls-secret/  entando.tls.secret.name: sample-tls-secret/g' sample-configmaps/entando-operator-config.yaml
sed -i 's/#  entando.ca.secret.name: sample-ca-cert-secret/  entando.ca.secret.name: sample-ca-cert-secret/g' sample-configmaps/entando-operator-config.yaml 
sed -i 's/#  entando.default.routing.suffix: your.domain.com/  entando.default.routing.suffix: ${HOSTNAME}.${INSTRUQT_PARTICIPANT_ID}.instruqt.io/g' sample-configmaps/entando-operator-config.yaml


#Updating values.yml
sed -i 's/##singleHostName:  test.mycluster.com/singleHostName: ${HOSTNAME}.${INSTRUQT_PARTICIPANT_ID}.instruqt.io/g' values.yaml
echo '****************INSTRUQT_PARTICIPANT_ID is successfully set'
echo '****************${HOSTNAME}.${INSTRUQT_PARTICIPANT_ID}.instruqt.io'


echo "apiVersion: v1" > sample-secrets/sample-tls-secret.yaml
echo "stringData:" >> sample-secrets/sample-tls-secret.yaml

echo "  tls.crt: |-" >> sample-secrets/sample-tls-secret.yaml
sed -i -e 's/^/    /' /root/server.crt
cat /root/server.crt >> sample-secrets/sample-tls-secret.yaml

echo "  tls.key: |-" >> sample-secrets/sample-tls-secret.yaml
sed -i -e 's/^/    /' /root/server.key
cat /root/server.key >> sample-secrets/sample-tls-secret.yaml

echo "kind: Secret" >> sample-secrets/sample-tls-secret.yaml
echo "metadata:" >> sample-secrets/sample-tls-secret.yaml
echo "  name: sample-tls-secret" >> sample-secrets/sample-tls-secret.yaml
echo "type: kubernetes.io/tls" >> sample-secrets/sample-tls-secret.yaml
echo "apiVersion: v1" > sample-secrets/sample-ca-cert-secret.yaml
echo "stringData:" >> sample-secrets/sample-ca-cert-secret.yaml

echo "  ca0.crt: |-" >> sample-secrets/sample-ca-cert-secret.yaml
cat /root/server.crt >> sample-secrets/sample-ca-cert-secret.yaml

echo "  ca1.crt: |-" >> sample-secrets/sample-ca-cert-secret.yaml
sed -i -e 's/^/    /' /root/rootCA.pem
cat /root/rootCA.pem >> sample-secrets/sample-ca-cert-secret.yaml

echo "kind: Secret" >> sample-secrets/sample-ca-cert-secret.yaml
echo "metadata:" >> sample-secrets/sample-ca-cert-secret.yaml
echo "  name: sample-ca-cert-secret" >> sample-secrets/sample-ca-cert-secret.yaml
echo "type: Opaque" >> sample-secrets/sample-ca-cert-secret.yaml

sudo kubectl apply -f sample-secrets/sample-tls-secret.yaml -n entando
sudo kubectl apply -f sample-secrets/sample-ca-cert-secret.yaml -n entando
sudo kubectl apply -f sample-configmaps/entando-operator-config.yaml -n entando

sudo helm template quickstart ./ > output.yaml
sed -i "41i\        environmentVariables: " output.yaml
sed -i '42i\        - name: "APPLICATIONBASEURL"' output.yaml
sed -i '43i\          value: "https://${HOSTNAME}.${INSTRUQT_PARTICIPANT_ID}.instruqt.io/entando-de-app/"' output.yaml
#sed -i 's/{HOSTNAME}/'"${var}"'/' output.yaml
sudo kubectl apply -f output.yaml -n entando
echo '*********************************************************'
echo '****************Please wait for 10-15 mins***************'
echo '*********************************************************'

#Install the current offical release of the CLI via the following command
curl -L https://get.entando.org/cli | bash
source "$HOME/.entando/activate"

#ent pro new
EOF
chmod 777 start.sh
